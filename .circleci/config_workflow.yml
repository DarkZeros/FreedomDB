# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

jobs:
  build_debug:
    docker:
      - image: darkzeros/freedomdb:0.0.1
    steps:
      - checkout
      - run: git submodule update --init --recursive
      - run:
          name: Building Debug
          command: |
            cmake -H. -Bdebug -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=ON
            cmake --build debug -- -j
      - store_artifacts:
          path: debug/freedomdb-tool
      - persist_to_workspace:
          root: .
          paths:
            - debug/*

  build_release:
    docker:
      - image: darkzeros/freedomdb:0.0.1
    steps:
      - checkout
      - run: git submodule update --init --recursive
      - run:
          name: Building Release
          command: |
            cmake -H. -Brelease -DCMAKE_BUILD_TYPE=Release
            cmake --build release -- -j
      - store_artifacts:
          path: release/freedomdb-tool
      - persist_to_workspace:
          root: .
          paths:
            - release/*

  build_python:
    docker:
      - image: darkzeros/freedomdb:0.0.1
    steps:
      - checkout
      - run: git submodule update --init --recursive
      - run:
          name: Building Python
          command: sudo python3 ./setup.py install
      - persist_to_workspace:
          root: /
          paths:
            - usr/local/lib/python3.8/dist-packages/*

  tests_native:
    docker:
      - image: darkzeros/freedomdb:0.0.1
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Native tests
          command: |
            mkdir -p catch-results
            ./debug/native-tests -r junit -o catch-results/junit.xml
      - store_test_results:
          path: catch-results
      - store_artifacts:
          path: catch-results

  tests_python:
    docker:
      - image: darkzeros/freedomdb:0.0.1
    steps:
      - checkout
      - attach_workspace:
          at: /
      - run:
          name: Python tests
          command: python3 -m pytest tests --junitxml=test-results/junit.xml
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results

workflows:
  build_and_test:
    jobs:
      - build_debug
      - build_release
      - build_python
      - tests_native:
          requires:
            - build_debug
      - tests_python:
          requires:
            - build_python
